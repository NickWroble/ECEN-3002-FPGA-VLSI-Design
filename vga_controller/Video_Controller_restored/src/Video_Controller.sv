
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Video_Controller(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

		//////////// VGA //////////
	output		 logic         		VGA_BLANK_N,
	output		 logic    [7:0]		VGA_B,
	output		 logic         		VGA_CLK,
	output		 logic    [7:0]		VGA_G,
	output		 logic         		VGA_HS,
	output		 logic    [7:0]		VGA_R,
	output		 logic         		VGA_SYNC_N,
	output		 logic         		VGA_VS
);
`include "parameters.vh"

assign VGA_SYNC_N = LOW;
//=======================================================
//  REG/WIRE declarations
//=======================================================
logic rst,locked_VGA,locked_DRAM,locked,a_reset,ready,valid;
logic [11:0]dx,dy;
logic [31:0]fifo_data;
assign rst = KEY[0];


//=======================================================
//  Structural coding
//=======================================================
platform U1(.clk_clk(CLOCK_50),.new_sdram_controller_0_wire_addr(DRAM_ADDR[12:0]),.new_sdram_controller_0_wire_ba(DRAM_BA[1:0]),
.new_sdram_controller_0_wire_cas_n(DRAM_CAS_N), .new_sdram_controller_0_wire_cke(DRAM_CKE), .new_sdram_controller_0_wire_cs_n(DRAM_CS_N),
.new_sdram_controller_0_wire_dq(DRAM_DQ[15:0]),
.new_sdram_controller_0_wire_dqm({DRAM_UDQM,DRAM_LDQM}), 
.new_sdram_controller_0_wire_ras_n(DRAM_RAS_N), 
.new_sdram_controller_0_wire_we_n(DRAM_WE_N),
.pio_0_external_connection_export(LEDR[9:0]),.pll_0_locked_export(locked_DRAM), .pll_0_outclk1_clk(DRAM_CLK),
.pll_1_locked_export(locked_VGA), .pll_1_outclk1_clk(VGA_CLK),              
	.fifo_0_out_valid(valid),                  //                  fifo_0_out.valid
	.fifo_0_out_data(fifo_data),                   //                            .data                //                            .error                  //                            .empty
	.fifo_0_out_ready(ready),
    .reset_reset_n(rst));


always@(CLOCK_50) begin
	locked<= locked_DRAM & locked_VGA;
end


Reset 		U2(.*);		
VTC 		U3(.*);
PG          U4(.*);

/*
module platform (
		input  wire        clk_clk,                           //                         clk.clk
		output wire        fifo_0_out_valid,                  //                  fifo_0_out.valid
		output wire [31:0] fifo_0_out_data,                   //                            .data
		output wire [7:0]  fifo_0_out_channel,                //                            .channel
		output wire [7:0]  fifo_0_out_error,                  //                            .error
		input  wire        fifo_0_out_ready,                  //                            .ready
		output wire [12:0] new_sdram_controller_0_wire_addr,  // new_sdram_controller_0_wire.addr
		output wire [1:0]  new_sdram_controller_0_wire_ba,    //                            .ba
		output wire        new_sdram_controller_0_wire_cas_n, //                            .cas_n
		output wire        new_sdram_controller_0_wire_cke,   //                            .cke
		output wire        new_sdram_controller_0_wire_cs_n,  //                            .cs_n
		inout  wire [15:0] new_sdram_controller_0_wire_dq,    //                            .dq
		output wire [1:0]  new_sdram_controller_0_wire_dqm,   //                            .dqm
		output wire        new_sdram_controller_0_wire_ras_n, //                            .ras_n
		output wire        new_sdram_controller_0_wire_we_n,  //                            .we_n
		output wire [9:0]  pio_0_external_connection_export,  //   pio_0_external_connection.export
		output wire        pll_0_locked_export,               //                pll_0_locked.export
		output wire        pll_0_outclk1_clk,                 //               pll_0_outclk1.clk
		output wire        pll_1_locked_export,               //                pll_1_locked.export
		output wire        pll_1_outclk1_clk,                 //               pll_1_outclk1.clk
		input  wire        reset_reset_n                      //                       reset.reset_n
	);
	*/
endmodule
